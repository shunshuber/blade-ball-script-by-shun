import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7861189824:AAHJYqds-yFSL62CUld2rNjYmFQs3rnHq1M"
OPENWEATHER_API_KEY = "a4d59bf0f52e6de1b4f17e4efc7e7a29"
EXCHANGE_RATE_API = "https://api.exchangerate-api.com/v4/latest/USD"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–¥–∞—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_tasks = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –ø–æ–ª–µ–∑–Ω—ã–π –±–æ—Ç ü§ñ\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞\n"
        "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n"
        "/addtask <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/deltask <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
    )

# –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeather API
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        city = " ".join(context.args)
        if not city:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞")
            return
        
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url).json()
        
        if response["cod"] != 200:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
            return
        
        weather_data = response["weather"][0]
        main_data = response["main"]
        result = (
            f"üå° –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main_data['feels_like']}¬∞C)\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['description'].capitalize()}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {main_data['humidity']}%\n"
            f"–í–µ—Ç–µ—Ä: {response['wind']['speed']} –º/—Å"
        )
        await update.message.reply_text(result)
    
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ üò¢")

# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 3:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert 100 USD RUB")
            return
        
        amount = float(args[0])
        from_cur = args[1].upper()
        to_cur = args[2].upper()
        
        response = requests.get(EXCHANGE_RATE_API).json()
        rates = response["rates"]
        
        if from_cur not in rates or to_cur not in rates:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ USD, EUR, RUB –∏ —Ç.–¥.)")
            return
        
        result = amount * (rates[to_cur] / rates[from_cur])
        await update.message.reply_text(
            f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"{amount:.2f} {from_cur} = {result:.2f} {to_cur}"
        )
    
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = " ".join(context.args)
    
    if not task:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É: /addtask –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
        return
    
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    
    user_tasks[user_id].append(task)
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = user_tasks.get(user_id, [])
    
    if not tasks:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return
    
    tasks_list = "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
    await update.message.reply_text(f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}")

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        task_num = int(context.args[0]) - 1
        task = user_tasks[user_id].pop(task_num)
        await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task}")
    except (IndexError, ValueError):
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /deltask 1")
    except KeyError:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CommandHandler("convert", convert))
    application.add_handler(CommandHandler("addtask", add_task))
    application.add_handler(CommandHandler("tasks", list_tasks))
    application.add_handler(CommandHandler("deltask", delete_task))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == "__main__":
    main()
    p
